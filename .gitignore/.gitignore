# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CityWeather
                                 A QGIS plugin
 This plugin reads the weather of the desired city
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-05-30
        git sha              : $Format:%H$
        copyright            : (C) 2018 by City Weather
        email                : mughalzain1995@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from qgis.core import *
from qgis.utils import *
from qgis.gui import *
from osgeo import ogr
import requests
from datetime import datetime,timedelta

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .city_weather_dialog import CityWeatherDialog
import os.path


class CityWeather:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'CityWeather_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = CityWeatherDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&City Weather')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'CityWeather')
        self.toolbar.setObjectName(u'CityWeather')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('CityWeather', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/city_weather/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&City Weather'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        dt=[]
        for i in range(0,5):
            days=datetime.today()+timedelta(days=i)
            final_day=days.strftime('%Y-%m-%d')
            dt.append(final_day)
        # Run the dialog event loop
        self.dlg.comboBox.addItems(dt)
        result = self.dlg.exec_()
        # See if OK was pressed
        
        if result:
            city = self.dlg.lineEdit.text()
            keyindex=self.dlg.comboBox.currentIndex()
            key=dt[keyindex]
            url='http://api.openweathermap.org/data/2.5/forecast?appid=0c42f7f6b53b244c78a418f4f181282a&q='
            url_tt = 'http://api.openweathermap.org/data/2.5/weather?appid=0c42f7f6b53b244c78a418f4f181282a&q='
            url_tt = url_tt + city
            url=url+city
            search=requests.get(url)
            search_json=search.json()
            search=requests.get(url_tt)
            search_json_tt=search.json()

            weather=dict()
            keys=[]
            values=search_json["list"]
            for i in range(len(values)):
                dates=list(search_json["list"][i]["dt_txt"])
                del(dates[10:])
                d=' '.join(dates)
                d=d.replace(" ","")
                keys.append(d)
                predictions=search_json["list"][i]["weather"][0]["description"]
                weather.update({d:predictions})
            
            values=search_json_tt["main"]
            temperature=search_json_tt["main"]['temp']
            pressure=search_json_tt["main"]['pressure']
            humidity=search_json_tt["main"]['humidity']            
            

            x = search_json["city"]["coord"]["lon"]
            y = search_json["city"]["coord"]["lat"]
            point=ogr.Geometry(ogr.wkbPoint)
            point.AddPoint(x,y)
            user_point=point.ExportToWkt()
            p1=QgsVectorLayer()
            p1=QgsVectorLayer("POINT?crs=epsg:4326","City","memory")
            QgsProject.instance().addMapLayer(p1)
            p1.startEditing()
            g=QgsGeometry()
            g=QgsGeometry.fromWkt(user_point)
            f=QgsFeature()
            f.setGeometry(g)
            p1.dataProvider().addFeatures([f])
            p1.commitChanges()
            message="The weather for the selected date is " 
            tmpr=" and the temperature for present day is "
            humd=" and the humidity is "
            presure=" and the pressure is "
            message=message+weather[key]+tmpr+str(temperature)+" Kelvin "+humd+str(humidity)+" percent "+presure+str(pressure)+" pascal "
            MessageBar=iface.messageBar().createMessage(message)
            iface.messageBar().pushWidget(MessageBar, Qgis.Info)
            
    
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
